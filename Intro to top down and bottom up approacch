//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
 int fib(std::vector<int>& dp, int n) {  
    if (n <= 1) return n; // Base cases: fib(0) = 0, fib(1) = 1  
    if (dp[n] != -1) return dp[n]; // Check if already computed  
    return dp[n] = fib(dp, n - 1) + fib(dp, n - 2); // Compute and store result  
}  

long long int topDown(int n) {  
    std::vector<int> dp(n + 1, -1); // Initialize dp array with -1  
    return fib(dp, n); // Call the recursive function  
} 
   long long int bottomUp(int n) {  
    if (n <= 1) return n; // Handle base cases  
    
    long long int dp[n + 1]; // Declare array to hold Fibonacci values  
    dp[0] = 0; // Base case: Fibonacci(0) = 0  
    dp[1] = 1; // Base case: Fibonacci(1) = 1  

    // Fill the dp array from Fibonacci(2) to Fibonacci(n)  
    for (int i = 2; i <= n; i++) {  
        dp[i] = dp[i - 1] + dp[i - 2];  
    }  
    
    return dp[n]; // Return the nth Fibonacci number  
}
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        Solution obj;
        long long int topDownans = obj.topDown(n);
        long long int bottomUpans = obj.bottomUp(n);
        if (topDownans != bottomUpans) cout << -1 << "\n";
        cout << topDownans << "\n";
    
cout << "~" << "\n";
}
}
// } Driver Code Ends
